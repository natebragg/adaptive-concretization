pragma options "--beopt:simplifycex NOSIM";
pragma options "--fe-fpencoding AS_FFIELD";
pragma options "--bnd-arr-size 400";
pragma options "--bnd-arr1d-size 400";
pragma options "--bnd-inbits 2";
pragma options "--bnd-cbits 2";
pragma options "--bnd-unroll-amnt 18";
pragma options "--bnd-inline-amnt 15";

void main(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k,int j, int k_p,int j_p) implements main_spec {
 int _array_sz = 1000;
boolean step_condition = (k < (y_max + 1))&&(j < (x_max + 2))&&(k >= y_min)&&(j >= (x_min - 1));
 double[_array_sz] arr_39e0d557aac5b838 = node_mass_pre;
arr_39e0d557aac5b838[99+(j + (((x_max + 3) - (x_min - 2)) * k))] = ((node_mass_post[99+(j + (((x_max + 3) - (x_min - 2)) * k))] - node_flux[99+((j - 1) + (((x_max + 3) - (x_min - 2)) * k))]) + node_flux[99+(j + (((x_max + 3) - (x_min - 2)) * k))]);
if ((I_k(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,k,j) && (!((k < (y_max + 1)))))) { assert(postcondition(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,k,j,k_p,j_p)); }

if ((I_j(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,k,j) && (!((j < (x_max + 2)))))) { assert(I_k2(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,(k + 1),j,k_p,j_p)); }

if ((I_j(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,k,j) && (j < (x_max + 2)))) { assert(I_j2(node_flux,node_mass_post,arr_39e0d557aac5b838,x_max,x_min,y_max,y_min,k,(j + 1),k_p,j_p)); }

if ((I_k(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,k,j) && (k < (y_max + 1)))) { assert(I_j2(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,k,(x_min - 1),k_p,j_p)); }
assert(I_k2(node_flux,node_mass_post,node_mass_pre,x_max,x_min,y_max,y_min,y_min,j,k_p,j_p)); 
}

void main_spec(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k,int j, int k_p,int j_p) {
 assume (((y_max + 1)) - (y_min) > 1);
 assume (((x_max + 2)) - ((x_min - 1)) > 1);
  
 
}




boolean I_k(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k, int j) {
  // short-circuit if we're out of valid loop range
  if (
      k < y_min ||
      k > (y_max + 1) ||
      j < (x_min - 1) ||
      j > (x_max + 2) ||
     false) { return false; }
  boolean ret = true;

  // check invariants for outer loops

  for (int _k=y_min; _k<k; _k++)
  for (int _j=(x_min - 1); _j<(x_max + 2); _j++)

  {
    if (!(node_mass_pre[idx_node_mass_pre(x_max,x_min,y_max,y_min,_k,_j)]==gen_node_mass_pre_k(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, _k, _j, 8)))
      ret = false;
  }

  return ret;
}





boolean I_k2(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k, int j, int k_p, int j_p) {
  boolean ret = true;

  // check invariants for outer loops

  int _k = k_p;
  int _j = j_p;

  if (_k>=y_min && _k<k)
  if (_j>=(x_min - 1) && _j<(x_max + 2))
  {
    if (!(node_mass_pre[idx_node_mass_pre(x_max,x_min,y_max,y_min,_k,_j)]==gen_node_mass_pre_k(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, _k, _j, 8)))
      ret = false;
  }

  return ret;
}




boolean I_j(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k, int j) {
  // short-circuit if we're out of valid loop range
  if (
      k < y_min ||
      k > (y_max + 1) ||
      j < (x_min - 1) ||
      j > (x_max + 2) ||
     false) { return false; }
  boolean ret = true;

  // check invariants for outer loops
  ret = ret && I_k(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, k, j);

  for (int _k=k; _k<=k; _k++)
  for (int _j=(x_min - 1); _j<j; _j++)
  {
    if (!(node_mass_pre[idx_node_mass_pre(x_max,x_min,y_max,y_min,_k,_j)]==gen_node_mass_pre_j(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, _k, _j, 8)))
      ret = false;
  }

  return ret;
}





boolean I_j2(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k, int j, int k_p, int j_p) {
  boolean ret = true;

  // check invariants for outer loops
  ret = ret && I_k2(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, k, j, k_p, j_p);

  int _k = k_p;
  int _j = j_p;

  if (_k>=k && _k<=k)
  if (_j>=(x_min - 1) && _j<j)
  {
    if (!(node_mass_pre[idx_node_mass_pre(x_max,x_min,y_max,y_min,_k,_j)]==gen_node_mass_pre_j(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, _k, _j, 8)))
      ret = false;
  }

  return ret;
}




double gen_node_mass_pre_postcondition(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k, int j, int _limit) {
  return gen_node_mass_pre(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, k, j, _limit);
}

boolean postcondition(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k, int j, int k_p, int j_p) {
  boolean ret = true;
  int _k = k_p;
  int _j = j_p;
  if (_k>=y_min && _k<(y_max + 1))
  if (_j>=(x_min - 1) && _j<(x_max + 2))
  {
    if (!(node_mass_pre[idx_node_mass_pre(x_max,x_min,y_max,y_min,_k,_j)]==gen_node_mass_pre_postcondition(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, _k, _j, 8)))
      ret = false;
  }

  return ret;
}
generator double dblgen() {
  if (??) { return 0.0; }
  if (??) { return 1.0; }
  if (??) { return 2.0; }
  if (??) { return 3.0; }
  if (??) { return 4.0; }
  if (??) { return 5.0; }
  if (??) { return 6.0; }
}

int idx_node_flux(int x_max,int x_min,int y_max,int y_min,int k,int j) {
  return idxgen(x_max,x_min,y_max,y_min,k,j);
}
int idx_node_mass_post(int x_max,int x_min,int y_max,int y_min,int k,int j) {
  return idxgen(x_max,x_min,y_max,y_min,k,j);
}
int idx_node_mass_pre(int x_max,int x_min,int y_max,int y_min,int k,int j) {
  return idxgen(x_max,x_min,y_max,y_min,k,j);
}

generator int idxgen(int x_max,int x_min,int y_max,int y_min,int k,int j) {
  generator int sz() {
    int z = 1;
    if (??) z = ((x_max + 3) - (x_min - 2));
    if (??) z = (x_max + 3);
    if (??) z = (x_min - 2);
    return z;
  
    int start = x_max;
    int end = x_max;
    if (??) { start = x_min; }
    else if (??) { start = y_max; }
    else if (??) { start = y_min; }

    if (??) { end = x_min; }
    else if (??) { end = y_max; }
    else if (??) { end = y_min; }



    if (??) { start = start - ??; }
    else if (??) { start = start + ??; }
    if (??) { end = end - ??; }
    else if (??) { end = end + ??; }

    return end-start;
  }

   
int lhsval = (99+k)+ (sz() * (j));
if (??) { lhsval = (99+j)+ (sz() * (k)); }
return lhsval;
 
}


void arr_copy(int sz, ref double[sz] in, ref double[sz] out) {
out = in;
}
double gen_node_mass_pre_k(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k,int j, int _limit) {
  return gen_node_mass_pre(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, k,j, _limit);
}
double gen_node_mass_pre_j(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k,int j, int _limit) {
  return gen_node_mass_pre(node_flux, node_mass_post, node_mass_pre, x_max, x_min, y_max, y_min, k,j, _limit);
}

generator double gen_node_mass_pre(ref double[1000] node_flux, ref double[1000] node_mass_post, ref double[1000] node_mass_pre, int x_max, int x_min, int y_max, int y_min, int k,int j,int _limit) {
   generator double wt(double a) {
    double ret = a;
    if (??) ret = 0.0;
    else if (??) ret = -a;
    return ret;
  }
  
  double arracc = 0.0;
  arracc = arracc + wt(node_flux[idx_node_flux(x_max,x_min,y_max,y_min,k,(j - 1))]);
  arracc = arracc + wt(node_flux[idx_node_flux(x_max,x_min,y_max,y_min,k,j)]);
  arracc = arracc + wt(node_mass_post[idx_node_mass_post(x_max,x_min,y_max,y_min,k,j)]);
  return arracc;
}

