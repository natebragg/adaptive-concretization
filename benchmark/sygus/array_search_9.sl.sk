int W = 8;

generator int rulefunc2(int y1,int y2,int y3,int y4,int y5,int y6,int y7,int y8,int y9,int k1,int bnd){
assert(bnd>0);
if(??) return 0;
if(??) return 1;
if(??) return 2;
if(??) return 3;
if(??) return 4;
if(??) return 5;
if(??) return 6;
if(??) return 7;
if(??) return 8;
if(??) return 9;
if(??) return y1;
if(??) return y2;
if(??) return y3;
if(??) return y4;
if(??) return y5;
if(??) return y6;
if(??) return y7;
if(??) return y8;
if(??) return y9;
if(??) return k1;
bit iifdq1 = rulefunc1(y1,y2,y3,y4,y5,y6,y7,y8,y9,k1,bnd-1);
int dpvcb1 = rulefunc2(y1,y2,y3,y4,y5,y6,y7,y8,y9,k1,bnd-1);
int dpvcb2 = rulefunc2(y1,y2,y3,y4,y5,y6,y7,y8,y9,k1,bnd-1);
if(??) return ite(iifdq1,dpvcb1,dpvcb2);
assert false;
}

generator bit rulefunc1(int y1,int y2,int y3,int y4,int y5,int y6,int y7,int y8,int y9,int k1,int bnd){
assert(bnd>0);
int qcqxq1 = rulefunc2(y1,y2,y3,y4,y5,y6,y7,y8,y9,k1,bnd-1);
int qcqxq2 = rulefunc2(y1,y2,y3,y4,y5,y6,y7,y8,y9,k1,bnd-1);
if(??) return lt(qcqxq1,qcqxq2);
if(??) return lte(qcqxq1,qcqxq2);
if(??) return gt(qcqxq1,qcqxq2);
if(??) return gte(qcqxq1,qcqxq2);
assert false;
}

@Native("(define-fun findIdx ((y1 Int) (y2 Int) (y3 Int) (y4 Int) (y5 Int) (y6 Int) (y7 Int) (y8 Int) (y9 Int) (k1 Int)) Int")
int findIdx (int y1,int y2,int y3,int y4,int y5,int y6,int y7,int y8,int y9,int k1){
return rulefunc2(y1,y2,y3,y4,y5,y6,y7,y8,y9,k1,BND);}

harness void main(int k,int x9,int x8,int x7,int x6,int x5,int x4,int x3,int x2,int x1){
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x8),lt(k,x9)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),8)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x7),lt(k,x8)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),7)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x6),lt(k,x7)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),6)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x5),lt(k,x6)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),5)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x4),lt(k,x5)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),4)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x3),lt(k,x4)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),3)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x2),lt(k,x3)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),2)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(and(gt(k,x1),lt(k,x2)),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),1)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(gt(k,x9),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),9)));
assert implies(and(lt(x1,x2),and(lt(x2,x3),and(lt(x3,x4),and(lt(x4,x5),and(lt(x5,x6),and(lt(x6,x7),and(lt(x7,x8),lt(x8,x9)))))))),implies(lt(k,x1),eqInt(findIdx(x1,x2,x3,x4,x5,x6,x7,x8,x9,k),0)));
}

int add(int x, int y){
  return x + y;
}

int sub(int x, int y){
  return x - y;
}

int mult(int x, int y){
  return x * y;
}

int div(int x, int y){
  return x / y;
}

bit lte(int x, int y){
  return x <= y;
}

bit lt(int x, int y){
  return x < y;
}

bit gte(int x, int y){
  return x >= y;
}

bit gt(int x, int y){
  return x > y;
}

bit eqInt(int x, int y){
  return x == y;
}

bit eqBit(bit x, bit y){
  return x == y;
}

bit eqBv(bit[W] x, bit[W] y){
  for(int i=0; i<W; i++)
    if(x[i] != y[i]) return 0;
  return 1;
}

int ite(bit c, int x, int y){
  if(c) return x;
  else return y;
}


bit and(bit x, bit y){
  return x && y;
}

bit or(bit x, bit y){
  return x || y;
}

bit not(bit x){
  return !x;
}

bit xor(bit x, bit y){
  if(x == y) return 0;
  else return 1;
}

bit nand(bit x, bit y){
  return !(x && y);
}

bit nor(bit x, bit y){
  return !(x || y);
}

bit implies(bit x, bit y){
  if(x && !y) return 0;
  return 1;
}

bit[W] bvand(bit[W] x, bit[W] y){
  return x & y;
}

bit[W] bvor(bit[W] x, bit[W] y){
  return x | y;
}

bit[W] bvxor(bit[W] x, bit[W] y){
  return x ^ y;
}

bit[W] bvxnor(bit[W] x, bit[W] y){
  return ~(x ^ y);
}

bit[W] bvnand(bit[W] x, bit[W] y){
  return ~(x & y);
}

bit[W] bvnor(bit[W] x, bit[W] y){
  return ~(x | y);
}

bit[W] bvadd(bit[W] x, bit[W] y){
  return x + y;
}

bit[W] bvsub(bit[W] x, bit[W] y){
  return (x + ~y + 1);
}


bit[W] bvlshr(bit[W] x, bit[W] k){
  int v = bv2nat(k);
  return x >> v;
}

bit[W] bvashr(bit[W] x, bit[W] k){
  int v = bv2nat(k);
  return x >> v;
}

bit[W] bvshl(bit[W] x, bit[W] k){
  int v = bv2nat(k);
  return x << v;
}


bit bvule(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]<y[i]) return 1;
    if(x[i]>y[i]) return 0;
  }   
  return 1;
}

bit bvult(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]<y[i]) return 1;
    if(x[i]>y[i]) return 0;
  }   
  return 0;
}

bit bvuge(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]>y[i]) return 1;
    if(x[i]<y[i]) return 0;
  }   
  return 1;
}

bit bvugt(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]>y[i]) return 1;
    if(x[i]<y[i]) return 0;
  }   
  return 0;
}

bit bvsle(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]<y[i]) return 1;
    if(x[i]>y[i]) return 0;
  }   
  return 1;
}

bit bvslt(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]<y[i]) return 1;
    if(x[i]>y[i]) return 0;
  }   
  return 0;
}

bit bvsge(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]>y[i]) return 1;
    if(x[i]<y[i]) return 0;
  }   
  return 1;
}

bit bvsgt(bit[W] x, bit[W] y){
  for(int i=W-1; i>=0; i--){
    if(x[i]>y[i]) return 1;
    if(x[i]<y[i]) return 0;
  }   
  return 0;
}


int bv2nat(bit[W] x){
  int res = 0;
  int pow = 1;
  for(int i=0;i<4;i++) {res += x[i]*pow; pow=pow*2;}
  return res;
}

bit[W] nat2bv(int x){
  bit[W] res = 0;
  for(int i=0; i<W; i++){
    int rem = x % 2;
    if(rem == 1) res[i] = 1;
    else res[i] = 0;
    x = x /2;
  }
  return res;
}

bit[W] bvmul(bit[W] x, bit[W] y){
  int xnat = bv2nat(x);
  int ynat = bv2nat(y);
  return nat2bv(xnat*ynat);
}

bit[W] bvudiv(bit[W] x, bit[W] y){
  int xnat = bv2nat(x);
  int ynat = bv2nat(y);
  return nat2bv(xnat/ynat);
}

bit[W] bvsdiv(bit[W] x, bit[W] y){
  int xnat = bv2nat(x);
  int ynat = bv2nat(y);
  return nat2bv(xnat/ynat);
}
bit[W] bvurem(bit[W] x, bit[W] y){
  int xnat = bv2nat(x);
  int ynat = bv2nat(y);
  return nat2bv(xnat%ynat);
}

bit[W] bvsrem(bit[W] x, bit[W] y){
  int xnat = bv2nat(x);
  int ynat = bv2nat(y);
  return nat2bv(xnat%ynat);
}

bit[W] bvnot(bit[W] x){
  return ~x;
}

bit[W] bvneg(bit[W] x){
  return (~x + 1);
}

bit bvcomp(bit[W] x, bit[W] y){
  for(int i=0; i<W; i++){
    if(x[i] != y[i]) return 0;
  }
  return 1;
}

bit bvredor(bit[W] x){
  bit res = 0;
  for(int i=0; i< W; i++) res = res | x[i];
  return res;
}

bit bvredand(bit[W] x){
  bit res = 1;
  for(int i=0; i< W; i++) res = res & x[i];
  return res;
}
